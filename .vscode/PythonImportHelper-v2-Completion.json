[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "audioop",
        "description": "audioop",
        "isExtraImport": true,
        "detail": "audioop",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_list_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "RegistrationsForm",
        "importPath": "accounts.form",
        "description": "accounts.form",
        "isExtraImport": true,
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "importPath": "accounts.form",
        "description": "accounts.form",
        "isExtraImport": true,
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "UserProfileForm",
        "importPath": "accounts.form",
        "description": "accounts.form",
        "isExtraImport": true,
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "_cart_id",
        "importPath": "carts.views",
        "description": "carts.views",
        "isExtraImport": true,
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderProduct",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderProduct",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderProduct",
        "importPath": "orders.models",
        "description": "orders.models",
        "isExtraImport": true,
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "carts.models",
        "description": "carts.models",
        "isExtraImport": true,
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "carts.models",
        "description": "carts.models",
        "isExtraImport": true,
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "carts.models",
        "description": "carts.models",
        "isExtraImport": true,
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "carts.models",
        "description": "carts.models",
        "isExtraImport": true,
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "get_current_site",
        "importPath": "django.contrib.sites.shortcuts",
        "description": "django.contrib.sites.shortcuts",
        "isExtraImport": true,
        "detail": "django.contrib.sites.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "django.core.exceptions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Variation",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Variation",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ReviewRating",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Variation",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Accounts",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Accounts",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Accounts",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "e_commerce",
        "description": "e_commerce",
        "isExtraImport": true,
        "detail": "e_commerce",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "admin_thumbnails",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "admin_thumbnails",
        "description": "admin_thumbnails",
        "detail": "admin_thumbnails",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "category.models",
        "description": "category.models",
        "isExtraImport": true,
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "category.models",
        "description": "category.models",
        "isExtraImport": true,
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "_cart_id",
        "importPath": "carts.views ",
        "description": "carts.views ",
        "isExtraImport": true,
        "detail": "carts.views ",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Accounts',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_userprofile",
        "description": "accounts.migrations.0002_userprofile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('address_line_1', models.CharField(blank=True, max_length=100)),",
        "detail": "accounts.migrations.0002_userprofile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0003_alter_userprofile_address_line_1_and_more",
        "description": "accounts.migrations.0003_alter_userprofile_address_line_1_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_userprofile'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userprofile',\n            name='address_line_1',\n            field=models.CharField(blank=True, default=False, max_length=100),\n        ),",
        "detail": "accounts.migrations.0003_alter_userprofile_address_line_1_and_more",
        "documentation": {}
    },
    {
        "label": "AccountAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class AccountAdmin(UserAdmin):\n    list_display=('email','first_name','last_name','username','last_login','date_join','is_active')\n    list_display_links=('email','first_name','last_name')\n    readonly_fields=('last_login','date_join')\n    ordering=('-date_join',)\n    filter_horizontal=()\n    list_filter=()\n    fieldsets=()\nclass UserProfileAdmin(admin.ModelAdmin):\n    def thumbnail(self,object):",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "UserProfileAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class UserProfileAdmin(admin.ModelAdmin):\n    def thumbnail(self,object):\n        return format_html('<img src=\"{}\" width=\"30\" style=\"border-radius:50%;\">'.format(object.profile_picture.url))\n    thumbnail.short_description='Profile Picture'\n    list_display=('thumbnail','user','city','state','country')\nadmin.site.register(Accounts,AccountAdmin)\nadmin.site.register(UserProfile,UserProfileAdmin)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "RegistrationsForm",
        "kind": 6,
        "importPath": "accounts.form",
        "description": "accounts.form",
        "peekOfCode": "class RegistrationsForm(forms.ModelForm):\n    password = forms.CharField(widget=forms.PasswordInput(attrs={\n        'placeholder':'Enter Password',\n        'class':'form-control', \n    }))\n    confirm_password = forms.CharField(widget=forms.PasswordInput(attrs={\n        'placeholder':'Confirm Password'\n    }))\n    class Meta:\n        model=Accounts",
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "accounts.form",
        "description": "accounts.form",
        "peekOfCode": "class UserForm(forms.ModelForm):\n        class Meta:\n            model = Accounts\n            fields = ('first_name','last_name','phone_number')\n        def __init__(self,*args,**kwargs):\n            super(UserForm,self).__init__(*args,**kwargs)\n            for field in self.fields:\n                self.fields[field].widget.attrs['class'] = 'form-control'\nclass UserProfileForm(forms.ModelForm):\n        profile_picture=forms.ImageField(required=False,error_messages={'invalid':(\"Image files only\")},widget=forms.FileInput)",
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "UserProfileForm",
        "kind": 6,
        "importPath": "accounts.form",
        "description": "accounts.form",
        "peekOfCode": "class UserProfileForm(forms.ModelForm):\n        profile_picture=forms.ImageField(required=False,error_messages={'invalid':(\"Image files only\")},widget=forms.FileInput)\n        class Meta:\n            model = UserProfile\n            fields=('address_line_1','address_line_2','city','state','country','profile_picture')\n        def __init__(self,*args,**kwargs):\n            super(UserProfileForm,self).__init__(*args,**kwargs)\n            for field in self.fields:\n                self.fields[field].widget.attrs['class'] = 'form-control'",
        "detail": "accounts.form",
        "documentation": {}
    },
    {
        "label": "MyAccountManager",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class MyAccountManager(BaseUserManager):\n    def create_user(self,first_name,last_name,username,email,password=None):\n        if not email:\n            raise ValueError(\"User mast have an email address\")\n        if not username:\n            raise ValueError(\"User mast have an username\")\n        user=self.model(\n            email=self.normalize_email(email),\n            username=username,\n            first_name=first_name,",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Accounts",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Accounts(AbstractBaseUser):\n    first_name=models.CharField(max_length=50)\n    last_name=models.CharField(max_length=50)\n    username=models.CharField(max_length=50, unique=True)\n    email=models.EmailField(max_length=100,unique=True)\n    phone_number=models.CharField(max_length=50)\n    date_join=models.DateTimeField(auto_now_add=True)\n    last_login=models.DateTimeField(auto_now_add=True)\n    is_admin=models.BooleanField(default=False)\n    is_staff=models.BooleanField(default=False)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user=models.OneToOneField(Accounts,on_delete=models.CASCADE)\n    address_line_1=models.CharField(max_length=100,blank=True,default=False)\n    address_line_2=models.CharField(max_length=100,blank=True,default=False)\n    profile_picture=models.ImageField(blank=True,upload_to='userprofile',default=False)\n    city=models.CharField(max_length=20,blank=True,default=False)\n    state=models.CharField(max_length=20,blank=True,default=False)\n    country=models.CharField(max_length=20,blank=True,default=False)\n    def __str__(self):\n        return self.user.first_name",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('accounts/register/',views.register,name='register'),\n    path('accounts/login/',views.login,name='login'),\n    path('accounts/logout/',views.logout,name='logout'),\n    path('accounts/dashboard/',views.dashboard,name='dashboard'),\n    path('accounts/',views.dashboard,name='dashboard'),\n    path('accounts/forgotPassword/',views.forgotPassword,name='forgotPassword'),\n    path('accounts/activate/<uidb64>/<token>/',views.activate,name='activate'),\n    path('accounts/resetpassword_validate/<uidb64>/<token>/',views.resetpassword_validate,name='resetpassword_validate'),\n    path('accounts/resetPassword/',views.resetPassword,name='resetPassword'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        form =RegistrationsForm(request.POST)\n        if form.is_valid():\n                first_name=form.cleaned_data['first_name']\n                last_name=form.cleaned_data['last_name']\n                phone_number=form.cleaned_data['phone_number']\n                email=form.cleaned_data['email']\n                password=form.cleaned_data['password']\n                username=email.split(\"@\")[0]      ",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def login(request):\n    if request.method == 'POST':\n        email = request.POST['email']\n        password = request.POST['password']\n        user=auth.authenticate(email=email,password=password)\n        if user is not None:\n            try:\n                cart=Cart.objects.get(cart_id=_cart_id(request))\n                is_cart_item_exists =CartItem.objects.filter(cart=cart).exists()\n                if is_cart_item_exists:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def logout(request):\n    auth.logout(request)\n    messages.success(request,'your are logout')\n    return redirect('login')\ndef activate(request,uidb64,token):\n    try:\n        uid=urlsafe_base64_decode(uidb64).decode()\n        user=Accounts._default_manager.get(pk=uid)\n    except(TypeError,ValueError,OverflowError,Accounts.DoesNotExist):\n        user=None",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "activate",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def activate(request,uidb64,token):\n    try:\n        uid=urlsafe_base64_decode(uidb64).decode()\n        user=Accounts._default_manager.get(pk=uid)\n    except(TypeError,ValueError,OverflowError,Accounts.DoesNotExist):\n        user=None\n    if user is not None and default_token_generator.check_token(user,token):\n        user.is_active=True\n        user.save()\n        messages.success(request,'congratulation your Account is activated.')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def dashboard(request):\n    try:\n        userprofile = UserProfile.objects.get(user_id=request.user.id)\n    except UserProfile.DoesNotExist:\n        userprofile = None\n    orders = Order.objects.order_by('-created_at').filter(user_id=request.user.id, is_ordered=True)\n    order_count = orders.count()\n    context = {\n        'order_count': order_count,\n        'userprofile': userprofile",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "forgotPassword",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def forgotPassword(request):\n    if request.method=='POST':\n        email=request.POST['email']\n        if Accounts.objects.filter(email=email).exists():\n            user=Accounts.objects.get(email__exact=email)\n            #reset password email\n            current_site=get_current_site(request)\n            mail_subject= 'Reset your password'\n            message=render_to_string('accounts/reset_password_email.html',{\n                    'user':user,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "resetpassword_validate",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def resetpassword_validate(request,uidb64,token):\n    try:\n        uid=urlsafe_base64_decode(uidb64).decode()\n        user=Accounts._default_manager.get(pk=uid)\n    except(TypeError,ValueError,OverflowError,Accounts.DoesNotExist):\n        user=None\n    if user is not None and default_token_generator.check_token(user,token):\n        request.session['uid'] = uid\n        messages.success(request,'Please reset your password')\n        return redirect('resetPassword')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "resetPassword",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def resetPassword(request):\n    if request.method=='POST':\n        password=request.POST['password']\n        confirm_password=request.POST['confirm_password']\n        if password==confirm_password:\n            uid=request.session.get('uid')\n            user=Accounts.objects.get(pk=uid)\n            user.set_password(password)\n            user.save()\n            messages.success(request,'Password is reset successfully!!!!')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "my_orders",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def my_orders(request):\n    orders=Order.objects.filter(user=request.user,is_ordered=True).order_by('-created_at')\n    path = request.path\n    context={\n        'orders':orders,\n        'path':path\n    }\n    return render(request,'accounts/my_orders.html',context,)\n@login_required(login_url='login')\ndef edit_profile(request):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "edit_profile",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def edit_profile(request):\n    try:\n        userprofile = UserProfile.objects.get(user=request.user)\n    except UserProfile.DoesNotExist:\n        userprofile = UserProfile.objects.create(user=request.user)\n    if request.method == 'POST':\n        user_form = UserForm(request.POST, instance=request.user)\n        profile_form = UserProfileForm(request.POST, request.FILES, instance=userprofile)\n        if user_form.is_valid() and profile_form.is_valid():\n            user_form.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def change_password(request):\n    if request.method =='POST':\n        current_password=request.POST['current_password']\n        new_password=request.POST['new_password']\n        confirm_new_password=request.POST['confirm_new_password']\n        user=Accounts.objects.get(username__exact=request.user.username)\n        if new_password == confirm_new_password:\n            success=user.check_password(current_password)\n            if success:\n                user.set_password(new_password)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "order_detail",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def order_detail(request,order_id):\n    order_detail=OrderProduct.objects.filter(order__order_number=order_id)\n    order=Order.objects.get(order_number=order_id)\n    subtotal=0\n    for i in order_detail:\n        subtotal=i.product_price *i.quantity\n    context={\n        'order_detail':order_detail,\n        'order':order,\n        'subtotal':subtotal",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "us",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def us(request):\n    return render(request,'accounts/us.html')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "carts.migrations.0001_initial",
        "description": "carts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='cart',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "carts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "carts.migrations.0002_cartitem_variations",
        "description": "carts.migrations.0002_cartitem_variations",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('carts', '0001_initial'),\n        ('store', '0002_variation'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cartitem',\n            name='variations',\n            field=models.ManyToManyField(blank=True, to='store.variation'),",
        "detail": "carts.migrations.0002_cartitem_variations",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "carts.migrations.0003_cartitem_user_alter_cartitem_cart",
        "description": "carts.migrations.0003_cartitem_user_alter_cartitem_cart",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('carts', '0002_cartitem_variations'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cartitem',\n            name='user',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),",
        "detail": "carts.migrations.0003_cartitem_user_alter_cartitem_cart",
        "documentation": {}
    },
    {
        "label": "CartAdmin",
        "kind": 6,
        "importPath": "carts.admin",
        "description": "carts.admin",
        "peekOfCode": "class CartAdmin(admin.ModelAdmin):\n    list_display = ('cart_id','date_added')\nclass CartItemAdmin(admin.ModelAdmin):\n    list_display = ('product','cart','quantity','is_active')\nadmin.site.register(Cart,CartAdmin)\nadmin.site.register(CartItem,CartItemAdmin)",
        "detail": "carts.admin",
        "documentation": {}
    },
    {
        "label": "CartItemAdmin",
        "kind": 6,
        "importPath": "carts.admin",
        "description": "carts.admin",
        "peekOfCode": "class CartItemAdmin(admin.ModelAdmin):\n    list_display = ('product','cart','quantity','is_active')\nadmin.site.register(Cart,CartAdmin)\nadmin.site.register(CartItem,CartItemAdmin)",
        "detail": "carts.admin",
        "documentation": {}
    },
    {
        "label": "CartsConfig",
        "kind": 6,
        "importPath": "carts.apps",
        "description": "carts.apps",
        "peekOfCode": "class CartsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'carts'",
        "detail": "carts.apps",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 2,
        "importPath": "carts.context_processors",
        "description": "carts.context_processors",
        "peekOfCode": "def counter(request):\n    cart_count=0\n    if 'admin' in request.path:\n        return {}\n    else:\n        try:\n            cart=Cart.objects.filter(cart_id=_cart_id(request))\n            if request.user.is_authenticated:\n                cart_items = CartItem.objects.all().filter(user=request.user)\n            else:",
        "detail": "carts.context_processors",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "carts.models",
        "description": "carts.models",
        "peekOfCode": "class Cart(models.Model):\n    cart_id = models.CharField(max_length=250,blank=True)\n    date_added=models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.cart_id\nclass CartItem(models.Model):\n    user=models.ForeignKey(Accounts,on_delete=models.CASCADE,null=True)\n    product=models.ForeignKey(Product,on_delete=models.CASCADE)\n    variations =models.ManyToManyField(Variation,blank=True)\n    cart=models.ForeignKey(Cart,on_delete=models.CASCADE,null=True)",
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "carts.models",
        "description": "carts.models",
        "peekOfCode": "class CartItem(models.Model):\n    user=models.ForeignKey(Accounts,on_delete=models.CASCADE,null=True)\n    product=models.ForeignKey(Product,on_delete=models.CASCADE)\n    variations =models.ManyToManyField(Variation,blank=True)\n    cart=models.ForeignKey(Cart,on_delete=models.CASCADE,null=True)\n    quantity=models.IntegerField()\n    is_active=models.BooleanField(default=True)\n    def sub_total(self):\n        return self.product.price * self.quantity\n    def __unicode__(self):",
        "detail": "carts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "carts.urls",
        "description": "carts.urls",
        "peekOfCode": "urlpatterns = [\n    path('cart/',views.cart,name='cart'),\n    path('add_cart/<int:product_id>/',views.add_cart,name='add_cart'),\n    path('remove_cart/<int:product_id>/<int:cart_item_id>/',views.remove_cart,name='remove_cart'),\n    path('remove_cart_item/<int:product_id>/<int:cart_item_id>/',views.remove_cart_item,name='remove_cart_item'),\n    path('cart/checkout/',views.checkout,name='checkout')\n]",
        "detail": "carts.urls",
        "documentation": {}
    },
    {
        "label": "add_cart",
        "kind": 2,
        "importPath": "carts.views",
        "description": "carts.views",
        "peekOfCode": "def add_cart(request, product_id):\n    current_user=request.user\n    product = Product.objects.get(id=product_id)\n    if current_user.is_authenticated: \n        product_variation = []\n        if request.method == 'POST':\n            for item in request.POST:\n                key=item\n                value=request.POST[key]\n                try:",
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "remove_cart",
        "kind": 2,
        "importPath": "carts.views",
        "description": "carts.views",
        "peekOfCode": "def remove_cart(request,product_id,cart_item_id):\n    product = get_object_or_404(Product,id=product_id)\n    try:\n        if request.user.is_authenticated:\n            cart_item = CartItem.objects.get(product=product,user=request.user,id=cart_item_id)\n        else:\n            cart=Cart.objects.get(cart_id=_cart_id(request))\n            cart_item = CartItem.objects.get(product=product,cart=cart,id=cart_item_id)\n        if cart_item.quantity > 1:\n            cart_item.quantity -=1",
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "remove_cart_item",
        "kind": 2,
        "importPath": "carts.views",
        "description": "carts.views",
        "peekOfCode": "def remove_cart_item(request,product_id,cart_item_id):\n    product = get_object_or_404(Product,id=product_id)\n    if request.user.is_authenticated:\n        cart_item = CartItem.objects.get(product=product,user=request.user,id=cart_item_id)\n    else:\n        cart=Cart.objects.get(cart_id=_cart_id(request))\n        cart_item = CartItem.objects.get(product=product,cart=cart,id=cart_item_id)\n    cart_item.delete()\n    return redirect('cart')\ndef cart(request, total=0, quantity=0, cart_items=None):",
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 2,
        "importPath": "carts.views",
        "description": "carts.views",
        "peekOfCode": "def cart(request, total=0, quantity=0, cart_items=None):\n    try:\n        tax=0\n        grand_total=0\n        if request.user.is_authenticated:\n            cart_items = CartItem.objects.filter(user=request.user, is_active=True)\n        else:\n            cart = Cart.objects.get(cart_id=_cart_id(request))\n            cart_items = CartItem.objects.filter(cart=cart, is_active=True)\n        for cart_item in cart_items:",
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "carts.views",
        "description": "carts.views",
        "peekOfCode": "def checkout(request, total=0, quantity=0, cart_items=None):\n    try:\n        tax=0\n        grand_total=0\n        if request.user.is_authenticated:\n            cart_items = CartItem.objects.filter(user=request.user, is_active=True)\n        else:\n            cart = Cart.objects.get(cart_id=_cart_id(request))\n            cart_items = CartItem.objects.filter(cart=cart, is_active=True)\n        for cart_item in cart_items:",
        "detail": "carts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "category.migrations.0001_initial",
        "description": "category.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category_name', models.CharField(max_length=50, unique=True)),",
        "detail": "category.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "category.migrations.0002_alter_category_slug",
        "description": "category.migrations.0002_alter_category_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('category', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='category',\n            name='slug',\n            field=models.SlugField(unique=True),\n        ),",
        "detail": "category.migrations.0002_alter_category_slug",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "category.admin",
        "description": "category.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    prepopulated_fields={'slug':('category_name',)}\n    list_display=('category_name','slug')#queca puisse s'afficher en tableau\nadmin.site.register(category,CategoryAdmin)",
        "detail": "category.admin",
        "documentation": {}
    },
    {
        "label": "CategoryConfig",
        "kind": 6,
        "importPath": "category.apps",
        "description": "category.apps",
        "peekOfCode": "class CategoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'category'",
        "detail": "category.apps",
        "documentation": {}
    },
    {
        "label": "menu_link",
        "kind": 2,
        "importPath": "category.context_processor",
        "description": "category.context_processor",
        "peekOfCode": "def menu_link(request):\n    links = category.objects.all()\n    return dict(links=links)",
        "detail": "category.context_processor",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 6,
        "importPath": "category.models",
        "description": "category.models",
        "peekOfCode": "class category(models.Model):\n    category_name=models.CharField(max_length=50,unique=True)\n    # nous voulons que dans le champ categorys lorsque je met une category automatiquement qu'il puisse se dupliquer dans slug et apres nous devons allez le sigmaler damns admin prepopulated_fields tutoriel'\n    slug=models.SlugField(max_length=50,unique=True)\n    description=models.TextField(max_length=255,blank=True)\n    cat_image=models.ImageField(upload_to='photo/categories',blank=True)\n    class Meta:\n        verbose_name = 'category'\n        verbose_name_plural = 'categories'\n    def get_url(self):",
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "e_commerce.asgi",
        "description": "e_commerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "e_commerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-)d(ku8gig8=+s3h$vxnqr65zo*nz#cw3+qm(j2n(mog)$2@_7s'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-)d(ku8gig8=+s3h$vxnqr65zo*nz#cw3+qm(j2n(mog)$2@_7s'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'category',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'category',\n    'accounts',\n    'store',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'e_commerce.urls'",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'e_commerce.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['C:/COM-CRED-GREEN/e_commerce/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['C:/COM-CRED-GREEN/e_commerce/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'e_commerce.wsgi.application'\nAUTH_USER_MODEL='accounts.Accounts'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /\n    'e_commerce/static',",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /\n    'e_commerce/static',\n]",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /\n    'e_commerce/static',\n]\n# pour les photo,... media",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /\n    'e_commerce/static',\n]\n# pour les photo,... media\nMEDIA_URL ='/media/'\nSTATIC_ROOT = BASE_DIR /'static'\n# Default primary key field type",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "STATIC_ROOT = '/e_commerce/static/'\nSTATICFILES_DIRS=[\n     BASE_DIR /\n    'e_commerce/static',\n]\n# pour les photo,... media\nMEDIA_URL ='/media/'\nSTATIC_ROOT = BASE_DIR /'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR /'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.ERROR: \"danger\",\n}\n#SHTP Configuration\nEMAIL_HOST= 'smtp.gmail.com'",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom django.contrib.messages import constants as messages\nMESSAGE_TAGS = {\n    messages.ERROR: \"danger\",\n}\n#SHTP Configuration\nEMAIL_HOST= 'smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER= 'bahatimarc2000@gmail.com'\nEMAIL_HOST_PASSWORD='qeiugnaofxudomgh'",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "e_commerce.settings",
        "description": "e_commerce.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.ERROR: \"danger\",\n}\n#SHTP Configuration\nEMAIL_HOST= 'smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER= 'bahatimarc2000@gmail.com'\nEMAIL_HOST_PASSWORD='qeiugnaofxudomgh'\nEMAIL_USE_TLS =True",
        "detail": "e_commerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "e_commerce.urls",
        "description": "e_commerce.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',views.home,name='home'),\n    path('',include('store.urls')) ,#cava me conduirevert un urls qui va a son tour me conduire vers views\n    path('',include('carts.urls')) ,\n    path('',include('accounts.urls')),\n    #orders\n    path('',include('orders.urls')),\n]+static(settings.MEDIA_URL,document_root= settings.MEDIA_ROOT)",
        "detail": "e_commerce.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "e_commerce.views",
        "description": "e_commerce.views",
        "peekOfCode": "def home(request):\n    products=Product.objects.all().filter(is_available=True).order_by('created_date')\n    for product in products:\n        reviews=ReviewRating.objects.filter(product_id=product.id,status=True)\n    context={\n        'products':products,\n        'reviews':reviews,\n    }\n    return render(request,'home.html',context)",
        "detail": "e_commerce.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "e_commerce.wsgi",
        "description": "e_commerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "e_commerce.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0001_initial",
        "description": "orders.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "orders.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0002_order_orderproduct",
        "description": "orders.migrations.0002_order_orderproduct",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('orders', '0001_initial'),\n        ('store', '0002_variation'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Order',\n            fields=[",
        "detail": "orders.migrations.0002_order_orderproduct",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0003_remove_orderproduct_color_remove_orderproduct_size",
        "description": "orders.migrations.0003_remove_orderproduct_color_remove_orderproduct_size",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('orders', '0002_order_orderproduct'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orderproduct',\n            name='color',\n        ),\n        migrations.RemoveField(",
        "detail": "orders.migrations.0003_remove_orderproduct_color_remove_orderproduct_size",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0004_remove_orderproduct_variation_and_more",
        "description": "orders.migrations.0004_remove_orderproduct_variation_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('orders', '0003_remove_orderproduct_color_remove_orderproduct_size'),\n        ('store', '0003_reviewrating'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orderproduct',\n            name='variation',\n        ),",
        "detail": "orders.migrations.0004_remove_orderproduct_variation_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0005_orderproduct_product_price",
        "description": "orders.migrations.0005_orderproduct_product_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('orders', '0004_remove_orderproduct_variation_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='orderproduct',\n            name='product_price',\n            field=models.FloatField(default=0.0),\n        ),",
        "detail": "orders.migrations.0005_orderproduct_product_price",
        "documentation": {}
    },
    {
        "label": "OrderProductInline",
        "kind": 6,
        "importPath": "orders.admin",
        "description": "orders.admin",
        "peekOfCode": "class OrderProductInline(admin.TabularInline):\n    model=OrderProduct\n    readonly_fields=('payment','user','product','quantity','product_price','ordered')\n    extra=0\nclass orderAdmin(admin.ModelAdmin):\n    list_display=['order_number','full_name','phone','email','city','order_total','tax','status','is_ordered','created_at']\n    list_filter =['status','is_ordered']\n    search_fields=['order_number','first_name','last_name','phone','email']\n    list_per_page=20\n    inlines=[OrderProductInline]",
        "detail": "orders.admin",
        "documentation": {}
    },
    {
        "label": "orderAdmin",
        "kind": 6,
        "importPath": "orders.admin",
        "description": "orders.admin",
        "peekOfCode": "class orderAdmin(admin.ModelAdmin):\n    list_display=['order_number','full_name','phone','email','city','order_total','tax','status','is_ordered','created_at']\n    list_filter =['status','is_ordered']\n    search_fields=['order_number','first_name','last_name','phone','email']\n    list_per_page=20\n    inlines=[OrderProductInline]\n# Register your models here.\nadmin.site.register(Order,orderAdmin)\nadmin.site.register(Payment)\nadmin.site.register(OrderProduct)",
        "detail": "orders.admin",
        "documentation": {}
    },
    {
        "label": "OrdersConfig",
        "kind": 6,
        "importPath": "orders.apps",
        "description": "orders.apps",
        "peekOfCode": "class OrdersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'orders'",
        "detail": "orders.apps",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "orders.forms",
        "description": "orders.forms",
        "peekOfCode": "class OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        fields = ['first_name', 'last_name', 'phone', 'email', 'address_line_1', 'address_line_2', 'country', 'state', 'city', 'order_note']",
        "detail": "orders.forms",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class Payment(models.Model):\n    user=models.ForeignKey(Accounts,on_delete=models.CASCADE)\n    payment_id=models.CharField(max_length=100)\n    payment_method=models.CharField(max_length=100)\n    amount_paid=models.CharField(max_length=100)\n    status=models.CharField(max_length=100)\n    created_date=models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.payment_id\nclass Order(models.Model):",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class Order(models.Model):\n    STATUS = (\n        ('New','New'),\n        ('Accepted','Accepted'),\n        ('Completed','Completed'),\n        ('Cancelled','Cancelled'),\n    )\n    user=models.ForeignKey(Accounts,on_delete=models.SET_NULL,null=True)\n    payment = models.ForeignKey(Payment, on_delete=models.SET_NULL, null=True, blank=True)\n    order_number=models.CharField(max_length=20)",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "OrderProduct",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class OrderProduct(models.Model):\n    order=models.ForeignKey(Order,on_delete=models.CASCADE)\n    payment=models.ForeignKey(Payment,on_delete=models.SET_NULL,blank=True,null=True)\n    user=models.ForeignKey(Accounts,on_delete=models.CASCADE)\n    product=models.ForeignKey(Product,on_delete=models.CASCADE)\n    variations =models.ManyToManyField(Variation,blank=True)\n    quantity=models.IntegerField()\n    product_price=models.FloatField(default=0.0)\n    ordered=models.BooleanField(default=False)\n    created_at=models.DateTimeField(auto_now_add=True)",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "orders.urls",
        "description": "orders.urls",
        "peekOfCode": "urlpatterns = [\n    path('orders/place_order/',views.place_order,name=\"place_order\"),\n    path('orders/payments/',views.payments,name=\"payments\"),\n    path('orders/place_order/orders/payments',views.payments,name=\"payments\"),\n    path('orders/order_complete/',views.order_complete,name=\"order_complete\"),\n]",
        "detail": "orders.urls",
        "documentation": {}
    },
    {
        "label": "payments",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def payments(request):\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        try:\n            orders = Order.objects.filter(is_ordered=False)\n            if orders.exists():\n                for order in orders:\n                    payment = Payment(\n                        user=request.user,\n                        payment_id=data['orderID'],",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def place_order(request,total=0, quantity=0):\n    current_user=request.user\n    cart_items=CartItem.objects.filter(user=current_user)\n    cart_count=cart_items.count()\n    if cart_count <= 0:\n        return redirect('store')\n    grand_total = 0\n    tax=0\n    for cart_item in cart_items:\n        total += (cart_item.product.price * cart_item.quantity)",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "order_complete",
        "kind": 2,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "def order_complete(request):\n    order_number = request.GET.get('order_number')\n    transID = request.GET.get('payment_id')\n    try:\n        order = Order.objects.get(order_number=order_number, is_ordered=True)\n        ordered_products = OrderProduct.objects.filter(order_id=order.id)\n        subtotal = 0\n        for i in ordered_products:\n            subtotal += i.product_price * i.quantity\n            # Utiliser filter() pour obtenir une liste de Payment",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('category', '0002_alter_category_slug'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0002_variation",
        "description": "store.migrations.0002_variation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Variation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('variation_category', models.CharField(choices=[('color', 'color'), ('size', 'size')], max_length=100)),",
        "detail": "store.migrations.0002_variation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0003_reviewrating",
        "description": "store.migrations.0003_reviewrating",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0002_variation'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReviewRating',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "store.migrations.0003_reviewrating",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0004_productgallery",
        "description": "store.migrations.0004_productgallery",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0003_reviewrating'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ProductGallery',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.ImageField(max_length=255, upload_to='store/products')),",
        "detail": "store.migrations.0004_productgallery",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0005_alter_productgallery_options",
        "description": "store.migrations.0005_alter_productgallery_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0004_productgallery'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='productgallery',\n            options={'verbose_name': 'productgallery', 'verbose_name_plural': 'product allery'},\n        ),\n    ]",
        "detail": "store.migrations.0005_alter_productgallery_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0006_shop",
        "description": "store.migrations.0006_shop",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0005_alter_productgallery_options'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Shop',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('photo1', models.ImageField(blank=True, upload_to='photo/categories')),",
        "detail": "store.migrations.0006_shop",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0007_remove_shop_description1_and_more",
        "description": "store.migrations.0007_remove_shop_description1_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0006_shop'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='shop',\n            name='description1',\n        ),\n        migrations.RemoveField(",
        "detail": "store.migrations.0007_remove_shop_description1_and_more",
        "documentation": {}
    },
    {
        "label": "ProductGalleryInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductGalleryInline(admin.TabularInline):\n    model=ProductGallery\n    extra=1\nclass ProductAdmin(admin.ModelAdmin):\n    list_display=('product_name','price','stock','category','modified_date','is_available')\n    prepopulated_fields ={'slug':('product_name',)}\n    inlines = [ProductGalleryInline]\nclass VariationAdmin(admin.ModelAdmin):\n    list_display=('product','variation_category','variation_value','is_active')\n    list_editable=('is_active',)#ca c'est juste pour modifier la case de is_active te le mettre en un petit caree",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    list_display=('product_name','price','stock','category','modified_date','is_available')\n    prepopulated_fields ={'slug':('product_name',)}\n    inlines = [ProductGalleryInline]\nclass VariationAdmin(admin.ModelAdmin):\n    list_display=('product','variation_category','variation_value','is_active')\n    list_editable=('is_active',)#ca c'est juste pour modifier la case de is_active te le mettre en un petit caree\n    list_filter = ('product','variation_category','variation_value')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Variation,VariationAdmin)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "VariationAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class VariationAdmin(admin.ModelAdmin):\n    list_display=('product','variation_category','variation_value','is_active')\n    list_editable=('is_active',)#ca c'est juste pour modifier la case de is_active te le mettre en un petit caree\n    list_filter = ('product','variation_category','variation_value')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Variation,VariationAdmin)\nadmin.site.register(ReviewRating)\nadmin.site.register(ProductGallery)\nadmin.site.register(Shop)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'store'",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "ReviewForm",
        "kind": 6,
        "importPath": "store.forms",
        "description": "store.forms",
        "peekOfCode": "class ReviewForm(forms.ModelForm):\n    class Meta:\n        model = ReviewRating\n        fields = ['subject', 'review', 'rating']",
        "detail": "store.forms",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Product(models.Model):\n    product_name=models.CharField(max_length=50,unique=True)\n    slug=models.SlugField(max_length=50,unique=True)\n    description=models.TextField(max_length=500,blank=True)\n    price=models.IntegerField()\n    image=models.ImageField(upload_to='photos/products')\n    stock=models.IntegerField()\n    is_available=models.BooleanField(default=True)\n    category=models.ForeignKey(category,on_delete=models.CASCADE)\n    created_date=models.DateTimeField(auto_now_add=True)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "VariationManager",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class VariationManager(models.Manager):\n    def colors(self):\n        return super(VariationManager,self).filter(variation_category='color',is_active=True)\n    def sizes(self):\n        return super(VariationManager,self).filter(variation_category='size',is_active=True)\nvariation_category_choice=(\n    ('color','color'),\n    ('size','size'),\n)\nclass Variation(models.Model):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Variation",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Variation(models.Model):\n        product = models.ForeignKey(Product,on_delete=models.CASCADE)\n        variation_category=models.CharField(max_length=100,choices=variation_category_choice)\n        variation_value=models.CharField(max_length=100)\n        is_active      = models.BooleanField(default=True)\n        created_date =models.DateTimeField(auto_now=True)\n        objects =VariationManager()\n        def __str__(self):\n            return self.variation_value\nclass ReviewRating(models.Model):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ReviewRating",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ReviewRating(models.Model):\n    product=models.ForeignKey(Product,on_delete=models.CASCADE)\n    user=models.ForeignKey(Accounts,on_delete=models.CASCADE)\n    subject=models.CharField(max_length=100,blank=True)\n    review=models.TextField(max_length=500,blank=True)\n    rating=models.FloatField()\n    ip=models.CharField(max_length=20,blank=True)\n    status=models.BooleanField(default=True)\n    created_at=models.DateTimeField(auto_now_add=True)\n    updated_at=models.DateTimeField(auto_now=True)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductGallery",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductGallery(models.Model):\n    product=models.ForeignKey(Product,default=None,on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='store/products',max_length=255)\n    def __str__(self):\n        return self.product.product_name\n    class Meta:\n        verbose_name = 'productgallery'\n        verbose_name_plural = 'product allery'\nclass Shop(models.Model):\n    name = models.CharField(max_length=50, blank=True)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Shop",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Shop(models.Model):\n    name = models.CharField(max_length=50, blank=True)\n    description_block2_4 = models.TextField()\n    def get_absolute_url(self):\n        return reverse('shop_detail', args=[str(self.id)])",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n    path('store/', views.store, name='store'),\n    path('store/category/<slug:category_slug>/', views.store, name='products_by_category'),  # Fixed the URL pattern\n    path('store/category/<slug:category_slug>/<slug:product_slug>/', views.product_detail, name='products_details'),  # Fixed the URL pattern\n    path('store/search/',views.search,name='search'),\n    path('store/submit_review/<int:product_id>',views.submit_review,name=\"submit_review\"),\n    path('store/',views.submit_review,name=\"submit_review\"),\n    path('store/shop/',views.shop,name=\"shop\"),\n]",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def store(request,category_slug=None):\n    categories=None,\n    products=None\n    if  category_slug !=None:\n        categories= get_object_or_404(category,slug=category_slug)\n        products=Product.objects.filter(category=categories,is_available=True)\n        paginator = Paginator(products,12)#le nombre de pages ou je veux que mon produit puisse s'afficher\n        page=request.GET.get('page')\n        paged_products=paginator.get_page(page)\n        product_count = products.count()",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def product_detail(request,category_slug,product_slug):\n    try:\n        single_product = Product.objects.get(category__slug=category_slug,slug=product_slug)#dans produit je dois recuperer le slug se trouvant dans categorie\n        in_cart=CartItem.objects.filter(cart__cart_id=_cart_id(request),product=single_product).exists()\n    except Exception as e:\n        raise e\n    if request.user.is_authenticated:\n        try:\n            orderproduct=OrderProduct.objects.filter(user=request.user,product_id=single_product.id).exists()\n        except OrderProduct.DoesNotExist:",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def search(request):\n    if 'keyword' in request.GET:\n        keyword = request.GET['keyword']\n        if keyword:\n            products=Product.objects.order_by('created_date').filter(Q(description__icontains=keyword) | Q(product_name__icontains=keyword))\n            product_count =products.count()#pour compter le nombre de produit se trouvant dans la table\n    context = {\n        'products':products,\n        'product_count':product_count\n    }",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "submit_review",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def submit_review(request, product_id):\n    url= request.META.get('HTTP_REFERER')\n    if request.method =='POST':\n        try:\n            reviews=ReviewRating.objects.get(user__id=request.user.id,product__id=product_id)\n            form=ReviewForm(request.POST,instance=reviews)\n            form.save()\n            messages.success(request,'Thank you your review has been update!!')\n            return redirect(url)\n        except ReviewRating.DoesNotExist:",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "shop",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def shop(request):\n    shops = Shop.objects.all()\n    context = {\n        'shops': shops\n    }\n    return render(request, 'accounts/shop.html', context)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'e_commerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]